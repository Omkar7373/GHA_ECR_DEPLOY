name: Build and Push Docker Images
on:
  workflow_call:
    inputs:
      image:
        type: string
        required: true
      context:
        type: string
        required: true
      dockerfile:
        type: string
        required: true
      commit_sha:
        description: Specific commit SHA to build from
        type: string
        required: true
      build-args:
        type: string
        default: ""
      skip-libs:
        type: boolean
        default: false
      push:
        type: boolean
        default: false
      tag_list:
        description: Comma-separated list of tags to apply to the image
        type: string
        required: false
        default: ""
        
jobs:
  prepare:
    name: Prepare Build for Docker Image ${{ inputs.image }}
    runs-on: ubuntu-latest
    outputs:
      commit_sha: ${{ steps.set-sha.outputs.commit_sha }}
      tag_lines: ${{ steps.generate-tags.outputs.tag_lines }}
    steps:
      - name: Checkout code
        if: inputs.commit_sha == ''
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commit_sha }}
          fetch-depth: 1  # Only need the specific commit
      - name: Set commit SHA
        id: set-sha
        run: |
          # Use the provided commit SHA or default to the current SHA
          if [ -z "${{ inputs.commit_sha }}" ]; then
            COMMIT_SHA=$(git rev-parse HEAD)
            echo "commit_sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
          else
            echo "commit_sha=${{ inputs.commit_sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Generate tag lines from tag_list
        id: generate-tags
        run: |
          # Start with the commit SHA tag
          TAGS_OUTPUT="type=raw,value=${{ steps.set-sha.outputs.commit_sha }},priority=1000,enable=true"

          # Process each tag in the tag_list if it exists
          if [ -n "${{ inputs.tag_list }}" ]; then
            IFS=',' read -ra TAGS <<< "${{ inputs.tag_list }}"
            for tag in "${TAGS[@]}"; do
              TAGS_OUTPUT="${TAGS_OUTPUT}\ntype=raw,value=${tag},enable=true"
            done
          fi

          # Write the output using the special delimiter syntax
          echo "tag_lines<<EOF" >> $GITHUB_OUTPUT
          echo -e "${TAGS_OUTPUT}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  build_and_push:
    name: Build and Push Docker Image ${{ inputs.image }} on ${{ matrix.arch }}
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include:
          # - arch: amd64
          #   runner: ubuntu-latest
          - arch: arm64
            runner: ubuntu-latest
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.commit_sha }}
          fetch-depth: 1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEYID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEYID }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        id: ecr-login
      - name: output the githbub actions build info
        run: |
          echo "VERSION=${{ needs.prepare.outputs.commit_sha }}"
          echo "BUILD_ARGS=${{ inputs.build-args }}"
          echo "TAG_LIST=${{ inputs.tag_list }}"
      - name: Debug context and dockerfile paths
        run: |
          echo "Context: ${{ inputs.context }}"
          echo "Dockerfile: ${{ inputs.dockerfile }}"
          ls -l ${{ inputs.context }}
          ls -l ${{ inputs.context }}/${{ inputs.dockerfile }}
      - name: Build and push docker image
        id: docker
        uses: ./.github/actions/docker
        with:
          image: ${{ inputs.image }}
          dockerfile: ${{ inputs.dockerfile }}
          context: ${{ inputs.context }}
          build-args: ${{ inputs.build-args }}
          push: ${{ inputs.push }}
          arch: ${{ matrix.arch }}
          commit_sha: ${{ needs.prepare.outputs.commit_sha }}

  merge:
    name: Create and Push a Multi-Platform Image Manifest ${{ inputs.image }}
    if: ${{ inputs.push }}
    runs-on: ubuntu-latest
    needs:
      - prepare
      - build_and_push
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-${{ inputs.image }}-@(amd64|arm64)
          merge-multiple: true
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEYID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEYID }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        id: ecr-login
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: 750187922702.dkr.ecr.ap-south-1.amazonaws.com/lerndemo/${{ inputs.image }}
          tags: ${{ needs.prepare.outputs.tag_lines }}
          flavor: |
            latest=false
      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '750187922702.dkr.ecr.ap-south-1.amazonaws.com/lerndemo/${{ inputs.image }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect 750187922702.dkr.ecr.ap-south-1.amazonaws.com/lerndemo/${{ inputs.image }}:${{ steps.meta.outputs.version }}



